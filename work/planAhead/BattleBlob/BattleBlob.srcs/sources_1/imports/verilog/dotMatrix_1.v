/*
   This file was generated automatically by the Mojo IDE version B1.3.5.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module dotMatrix_1 (
    input clk,
    input rst,
    input [104:0] confirmed,
    input [4:0] tempc,
    input [6:0] tempr,
    input activate,
    output reg [4:0] greenc,
    output reg [6:0] greenr,
    output reg [4:0] redc,
    output reg [6:0] redr
  );
  
  
  
  integer i;
  integer j;
  
  reg [24:0] M_counter_d, M_counter_q = 1'h0;
  
  reg [24:0] M_blinker_d, M_blinker_q = 1'h0;
  
  
  localparam ONER_row = 4'd0;
  localparam TWOR_row = 4'd1;
  localparam THREER_row = 4'd2;
  localparam FOURR_row = 4'd3;
  localparam FIVER_row = 4'd4;
  localparam ONEG_row = 4'd5;
  localparam TWOG_row = 4'd6;
  localparam THREEG_row = 4'd7;
  localparam FOURG_row = 4'd8;
  localparam FIVEG_row = 4'd9;
  
  reg [3:0] M_row_d, M_row_q = ONER_row;
  
  always @* begin
    M_row_d = M_row_q;
    M_blinker_d = M_blinker_q;
    M_counter_d = M_counter_q;
    
    greenr = 1'h0;
    greenc = 5'h1f;
    redr = 1'h0;
    redc = 5'h1f;
    
    case (M_row_q)
      ONEG_row: begin
        greenc[0+0-:1] = 1'h0;
        for (i = 1'h0; i < 3'h7; i = i + 1) begin
          if (confirmed[0+(i)*3+2-:3] == 1'h1 || confirmed[0+(i)*3+2-:3] == 3'h5) begin
            greenr[(i)*1+0-:1] = 1'h1;
          end else begin
            if (confirmed[0+(i)*3+2-:3] == 3'h4) begin
              greenr[(i)*1+0-:1] = M_blinker_q[24+0-:1];
            end
          end
        end
        if (tempc[0+0-:1] == 1'h1 && activate) begin
          for (i = 1'h0; i < 3'h7; i = i + 1) begin
            if (tempr[(i)*1+0-:1] == 1'h1) begin
              greenr[(i)*1+0-:1] = 1'h1;
            end
          end
        end
        if (M_counter_q[16+0-:1] == 1'h1) begin
          M_row_d = ONER_row;
        end
      end
      ONER_row: begin
        redc[0+0-:1] = 1'h0;
        for (i = 1'h0; i < 3'h7; i = i + 1) begin
          if (confirmed[0+(i)*3+2-:3] == 3'h3) begin
            redr[(i)*1+0-:1] = 1'h1;
          end else begin
            if (confirmed[0+(i)*3+2-:3] == 3'h2) begin
              redr[(i)*1+0-:1] = M_blinker_q[24+0-:1];
            end
          end
        end
        if (M_counter_q[16+0-:1] == 1'h1) begin
          M_row_d = TWOG_row;
        end
      end
      TWOG_row: begin
        greenc[1+0-:1] = 1'h0;
        for (i = 1'h0; i < 3'h7; i = i + 1) begin
          if (confirmed[21+(i)*3+2-:3] == 3'h1 || confirmed[21+(i)*3+2-:3] == 3'h5) begin
            greenr[(i)*1+0-:1] = 1'h1;
          end else begin
            if (confirmed[21+(i)*3+2-:3] == 3'h4) begin
              greenr[(i)*1+0-:1] = M_blinker_q[24+0-:1];
            end
          end
        end
        if (tempc[1+0-:1] == 1'h1 && activate) begin
          for (i = 1'h0; i < 3'h7; i = i + 1) begin
            if (tempr[(i)*1+0-:1] == 1'h1) begin
              greenr[(i)*1+0-:1] = 1'h1;
            end
          end
        end
        if (M_counter_q[16+0-:1] == 1'h1) begin
          M_row_d = TWOR_row;
        end
      end
      TWOR_row: begin
        redc[1+0-:1] = 1'h0;
        for (i = 1'h0; i < 3'h7; i = i + 1) begin
          if (confirmed[21+(i)*3+2-:3] == 3'h3) begin
            redr[(i)*1+0-:1] = 1'h1;
          end else begin
            if (confirmed[21+(i)*3+2-:3] == 3'h2) begin
              redr[(i)*1+0-:1] = M_blinker_q[24+0-:1];
            end
          end
        end
        if (M_counter_q[16+0-:1] == 1'h1) begin
          M_row_d = THREEG_row;
        end
      end
      THREEG_row: begin
        greenc[2+0-:1] = 1'h0;
        for (i = 1'h0; i < 3'h7; i = i + 1) begin
          if (confirmed[42+(i)*3+2-:3] == 3'h1 || confirmed[42+(i)*3+2-:3] == 3'h5) begin
            greenr[(i)*1+0-:1] = 1'h1;
          end else begin
            if (confirmed[42+(i)*3+2-:3] == 3'h4) begin
              greenr[(i)*1+0-:1] = M_blinker_q[24+0-:1];
            end
          end
        end
        if (tempc[2+0-:1] == 1'h1 && activate) begin
          for (i = 1'h0; i < 3'h7; i = i + 1) begin
            if (tempr[(i)*1+0-:1] == 1'h1) begin
              greenr[(i)*1+0-:1] = 1'h1;
            end
          end
        end
        if (M_counter_q[16+0-:1] == 1'h1) begin
          M_row_d = THREER_row;
        end
      end
      THREER_row: begin
        redc[2+0-:1] = 1'h0;
        for (i = 1'h0; i < 3'h7; i = i + 1) begin
          if (confirmed[42+(i)*3+2-:3] == 3'h3) begin
            redr[(i)*1+0-:1] = 1'h1;
          end else begin
            if (confirmed[42+(i)*3+2-:3] == 3'h2) begin
              redr[(i)*1+0-:1] = M_blinker_q[24+0-:1];
            end
          end
        end
        if (M_counter_q[16+0-:1] == 1'h1) begin
          M_row_d = FOURG_row;
        end
      end
      FOURG_row: begin
        greenc[3+0-:1] = 1'h0;
        for (i = 1'h0; i < 3'h7; i = i + 1) begin
          if (confirmed[63+(i)*3+2-:3] == 3'h1 || confirmed[63+(i)*3+2-:3] == 3'h5) begin
            greenr[(i)*1+0-:1] = 1'h1;
          end else begin
            if (confirmed[63+(i)*3+2-:3] == 3'h4) begin
              greenr[(i)*1+0-:1] = M_blinker_q[24+0-:1];
            end
          end
        end
        if (tempc[3+0-:1] == 1'h1 && activate) begin
          for (i = 1'h0; i < 3'h7; i = i + 1) begin
            if (tempr[(i)*1+0-:1] == 1'h1) begin
              greenr[(i)*1+0-:1] = 1'h1;
            end
          end
        end
        if (M_counter_q[16+0-:1] == 1'h1) begin
          M_row_d = FOURR_row;
        end
      end
      FOURR_row: begin
        redc[3+0-:1] = 1'h0;
        for (i = 1'h0; i < 3'h7; i = i + 1) begin
          if (confirmed[63+(i)*3+2-:3] == 3'h3) begin
            redr[(i)*1+0-:1] = 1'h1;
          end else begin
            if (confirmed[63+(i)*3+2-:3] == 3'h2) begin
              redr[(i)*1+0-:1] = M_blinker_q[24+0-:1];
            end
          end
        end
        if (M_counter_q[16+0-:1] == 1'h1) begin
          M_row_d = FIVEG_row;
        end
      end
      FIVEG_row: begin
        greenc[4+0-:1] = 1'h0;
        for (i = 1'h0; i < 3'h7; i = i + 1) begin
          if (confirmed[84+(i)*3+2-:3] == 3'h1 || confirmed[84+(i)*3+2-:3] == 3'h5) begin
            greenr[(i)*1+0-:1] = 1'h1;
          end else begin
            if (confirmed[84+(i)*3+2-:3] == 3'h4) begin
              greenr[(i)*1+0-:1] = M_blinker_q[24+0-:1];
            end
          end
        end
        if (tempc[4+0-:1] == 1'h1 && activate) begin
          for (i = 1'h0; i < 3'h7; i = i + 1) begin
            if (tempr[(i)*1+0-:1] == 1'h1) begin
              greenr[(i)*1+0-:1] = 1'h1;
            end
          end
        end
        if (M_counter_q[16+0-:1] == 1'h1) begin
          M_row_d = FIVER_row;
        end
      end
      FIVER_row: begin
        redc[4+0-:1] = 1'h0;
        for (i = 1'h0; i < 3'h7; i = i + 1) begin
          if (confirmed[84+(i)*3+2-:3] == 3'h3) begin
            redr[(i)*1+0-:1] = 1'h1;
          end else begin
            if (confirmed[84+(i)*3+2-:3] == 3'h2) begin
              redr[(i)*1+0-:1] = M_blinker_q[24+0-:1];
            end
          end
        end
        if (M_counter_q[16+0-:1] == 1'h1) begin
          M_row_d = ONEG_row;
        end
      end
    endcase
    if (M_counter_q[16+0-:1] == 1'h1) begin
      M_counter_d = 1'h0;
    end else begin
      M_counter_d = M_counter_q + 1'h1;
    end
    M_blinker_d = M_blinker_q + 1'h1;
  end
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_blinker_q <= 1'h0;
    end else begin
      M_blinker_q <= M_blinker_d;
    end
  end
  
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_counter_q <= 1'h0;
    end else begin
      M_counter_q <= M_counter_d;
    end
  end
  
  
  always @(posedge clk) begin
    M_row_q <= M_row_d;
  end
  
endmodule
